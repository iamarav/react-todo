{"version":3,"sources":["components/TaskAppComponent/TaskAppComponent.module.css","components/SingleTask/SingleTask.module.css","components/AllTasks/AllTasks.module.css","logo.svg","components/SingleTask/SingleTask.js","components/AllTasks/AllTasks.js","components/TaskAppComponent/TaskAppComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SingleTask","props","states","className","styles","detail_task","this","task","date_task","date","Component","AllTasks","nTasks","Array","isArray","tasks","length","reverse","map","index","key","TaskAppComponent","saveInputText","event","setState","inputVal","target","value","addNewTask","state","mVal","Date","allTasks","document","getElementById","alert","console","log","resetTasks","window","confirm","forceUpdate","btnTextAdd","btnTextReset","placeholder","input_task","onChange","id","buttonGroups","type","onClick","add_task","reset_tasks","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,SAAW,mCAAmC,YAAc,sCAAsC,WAAa,qCAAqC,aAAe,yC,gBCAnPD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,YAAc,gCAAgC,UAAY,gC,kBCAxHD,EAAOC,QAAU,CAAC,SAAW,6B,wECD7BD,EAAOC,QAAU,IAA0B,kC,kMCyB5BC,E,kDApBb,WAAaC,GAAQ,IAAD,8BAClB,cAAOA,IACFC,OAAS,GAFI,E,qDAMlB,OACE,yBAAKC,UAAWC,IAAOJ,YACrB,0BAAMG,UAAYC,IAAOC,aACrBC,KAAKL,MAAMM,MAEf,6BACA,0BAAMJ,UAAYC,IAAOI,WACrBF,KAAKL,MAAMQ,W,GAdEC,aC0CVC,E,kDAvCb,WAAaV,GAAQ,IAAD,8BAClB,cAAOA,IAITW,OAAS,KAHP,EAAKV,OAAS,GAFI,E,qDA+BlB,OAvBIW,MAAMC,QAASR,KAAKL,MAAMc,QAAWT,KAAKL,MAAMc,MAAMC,OAAS,IAEjEV,KAAKM,OACH,6BAEIN,KAAKL,MAAMc,MAAME,UAAUC,KAAK,SAACX,EAAMY,GAErC,OACM,kBAAC,EAAD,CACIZ,KAAOA,EAAKA,KACZa,IAAMD,EACNV,KAAOF,EAAKE,YAa9B,yBAAKN,UAAWC,IAAOO,UACnBL,KAAKM,Y,GAlCQF,aC8ERW,E,kDA9Eb,aAAc,IAAD,8BACX,gBAUFC,cAAgB,SAAEC,GAChB,EAAKC,SAAS,CAACC,SAAUF,EAAMG,OAAOC,SAZ3B,EAcbC,WAAa,WACX,GAA2B,IAAvB,EAAKC,MAAMJ,SAAf,CAKA,IAAIK,EAAO,CACTvB,KAAM,EAAKsB,MAAMJ,SACjBhB,KAAMsB,QAER,EAAKP,SAAS,CACRQ,SAAS,GAAD,mBAAM,EAAKH,MAAMG,UAAjB,CAA2BF,IACnCL,SAAW,KAEjBQ,SAASC,eAAgB,kBAAmBP,MAAQ,GACpDQ,MAAO,mBAZLC,QAAQC,IAAK,0BAjBJ,EA+BbC,WAAa,WACIC,OAAOC,QAAS,oDAG3B,EAAKhB,SAAS,CAAEQ,SAAU,KAE5B,EAAKS,cAEPN,MAAO,yBArCP,EAAKN,MAAQ,CACXa,WAAa,eACbC,aAAe,kBACfC,YAAa,mBACbZ,SAAU,GACVP,SAAU,IAPD,E,qDA2CX,OACI,yBAAKtB,UAAWC,IAAOiB,kBACrB,yBAAKlB,UAAU,gBACb,2BACEA,UAAYC,IAAOyC,WACnBC,SAAWxC,KAAKgB,cAChBsB,YAAatC,KAAKuB,MAAMe,YACxBG,GAAG,mBAEL,yBAAK5C,UAAWC,IAAO4C,cACrB,4BACEC,KAAK,SACLC,QAAU5C,KAAKsB,WACfzB,UAAYC,IAAO+C,UAEjB7C,KAAKuB,MAAMa,YAGf,4BACEO,KAAK,SACLC,QAAU5C,KAAKgC,WACfnC,UAAYC,IAAOgD,aAEjB9C,KAAKuB,MAAMc,eAGnB,kBAAC,EAAD,CAAU5B,MAAOT,KAAKuB,MAAMG,iB,GAtEPtB,aCkBhB2C,MAlBf,WACE,OACE,yBAAKlD,UAAU,OACX,yBACEA,UAAU,WAER,sDAIJ,6BACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCLUmD,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5180bb69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskAppComponent\":\"TaskAppComponent_TaskAppComponent__ivMdY\",\"add_task\":\"TaskAppComponent_add_task__2hZJv\",\"reset_tasks\":\"TaskAppComponent_reset_tasks__FGaDx\",\"input_task\":\"TaskAppComponent_input_task__1uBaE\",\"buttonGroups\":\"TaskAppComponent_buttonGroups__2wp1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SingleTask\":\"SingleTask_SingleTask__3YETa\",\"detail_task\":\"SingleTask_detail_task__3TEzB\",\"date_task\":\"SingleTask_date_task__206JW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllTasks\":\"AllTasks_AllTasks__2MSaV\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SingleTask.module.css';\n\nclass SingleTask extends Component {\n  constructor( props ){\n    super( props );\n    this.states = {\n    }\n  }\n  render(){\n    return(\n      <div className={styles.SingleTask}>\n        <span className={ styles.detail_task } >\n          { this.props.task }\n        </span>\n        <hr />\n        <span className={ styles.date_task } >\n          { this.props.date }\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default SingleTask;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './AllTasks.module.css';\n\nimport SingleTask from '../SingleTask/SingleTask';\n\nclass AllTasks extends Component {\n  constructor( props ){\n    super( props );\n    this.states = {\n    }\n  }\n  nTasks = null;\n\n  render(){\n    if( Array.isArray( this.props.tasks ) && this.props.tasks.length > 0  )\n    { \n      this.nTasks = (\n        <div>\n          {\n            this.props.tasks.reverse().map( (task, index)  => {\n\n              return (\n                    <SingleTask \n                        task={ task.task } \n                        key={ index } \n                        date={ task.date }\n                        >\n                        </SingleTask>\n                    )              \n            })\n          }\n\n\n        </div>\n      );\n    }\n\n    return (      \n      <div className={styles.AllTasks} >\n        { this.nTasks }\n      </div>\n    );\n  }\n}\n\nexport default AllTasks;\n","import React, { Component } from 'react';\nimport styles from './TaskAppComponent.module.css';\n\nimport AllTasks from '../AllTasks/AllTasks';\n\nclass TaskAppComponent extends Component{\n  constructor(){\n    super();\n    this.state = {\n      btnTextAdd : \"Add New Task\",\n      btnTextReset : \"Reset all tasks\" , \n      placeholder: \"Enter a new task\", \n      allTasks: [],\n      inputVal: \"\",\n    }\n  }\n\n  saveInputText = ( event ) => {\n    this.setState({inputVal: event.target.value});\n  }\n  addNewTask = () =>{\n    if( this.state.inputVal == \"\" )\n    {\n      console.log( 'Task cannot be empty!' )\n      return;\n    }\n    let mVal = {\n      task: this.state.inputVal,\n      date: Date(),\n    }\n    this.setState({ \n          allTasks: [...this.state.allTasks, mVal],\n          inputVal : \"\"\n          }) // adding value to the state\n    document.getElementById( \"input_add_task\" ).value = \"\"          \n    alert( 'Task Added' )\n  }\n  resetTasks = () => {\n    let mConfirm = window.confirm( 'Are you sure?/nYou want to reset all the tasks?' );\n    if( mConfirm )\n      {\n        this.setState({ allTasks: [] }) // reset value to the state tasks\n      }\n      this.forceUpdate();\n\n    alert( 'Tasks reset success!' )\n\n  }\n  render(){\n    return(\n        <div className={styles.TaskAppComponent}>\n          <div className=\"add-new-task\">\n            <input \n              className={ styles.input_task }\n              onChange={ this.saveInputText }\n              placeholder={this.state.placeholder }\n              id=\"input_add_task\"\n            />\n            <div className={styles.buttonGroups} >\n              <button \n                type=\"button\" \n                onClick={ this.addNewTask }\n                className={ styles.add_task }\n                >\n                { this.state.btnTextAdd }\n              </button>\n\n              <button \n                type=\"button\" \n                onClick={ this.resetTasks }\n                className={ styles.reset_tasks }\n                >\n                { this.state.btnTextReset }\n              </button>\n            </div>\n          <AllTasks tasks={this.state.allTasks} ></AllTasks>\n\n          </div>\n\n        </div>\n    );\n  }\n}\n\nexport default TaskAppComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskAppComponent from './components/TaskAppComponent/TaskAppComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div \n          className=\"heading\"\n          >\n            <h1>\n              TODO List - React App\n            </h1>\n          </div>\n        <hr />\n        <div className=\"todo-list\">\n          <TaskAppComponent/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}