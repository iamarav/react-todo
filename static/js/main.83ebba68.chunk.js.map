{"version":3,"sources":["components/TaskAppComponent/TaskAppComponent.module.css","components/SingleTask/SingleTask.module.css","components/AllTasks/AllTasks.module.css","logo.svg","components/SingleTask/SingleTask.js","components/AllTasks/AllTasks.js","components/TaskAppComponent/TaskAppComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SingleTask","props","states","markAsCompletedButton","this","status","className","styles","mark_completed_button","onClick","completedAction","index","detail_task","task","date_task","date","delete_task_button","deleteAction","Component","AllTasks","nTasks","Array","isArray","tasks","length","map","key","TaskAppComponent","saveInputText","event","setState","inputVal","target","value","addNewTask","state","mVal","Date","allTasks","document","getElementById","alert","console","log","resetTasks","window","confirm","forceUpdate","deleteTask","$index","array","splice","stateChanged","markTaskDone","tempArray","btnTextAdd","btnTextReset","placeholder","input_task","onChange","id","buttonGroups","type","add_task","reset_tasks","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83ebba68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskAppComponent\":\"TaskAppComponent_TaskAppComponent__ivMdY\",\"add_task\":\"TaskAppComponent_add_task__2hZJv\",\"reset_tasks\":\"TaskAppComponent_reset_tasks__FGaDx\",\"input_task\":\"TaskAppComponent_input_task__1uBaE\",\"buttonGroups\":\"TaskAppComponent_buttonGroups__2wp1n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SingleTask\":\"SingleTask_SingleTask__3YETa\",\"detail_task\":\"SingleTask_detail_task__3TEzB\",\"date_task\":\"SingleTask_date_task__206JW\",\"delete_task_button\":\"SingleTask_delete_task_button__fMmic\",\"mark_completed_button\":\"SingleTask_mark_completed_button__3kWCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AllTasks\":\"AllTasks_AllTasks__2MSaV\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport styles from './SingleTask.module.css';\r\n\r\nclass SingleTask extends Component {\r\n  constructor( props ){\r\n    super( props );\r\n    this.states = {\r\n    }\r\n  }\r\n  render(){\r\n    let markAsCompletedButton = this.props.status !== \"Completed\" ? \r\n      ( \r\n        <>\r\n        &nbsp;\r\n          <button \r\n                className = { styles.mark_completed_button }\r\n                onClick={() => this.props.completedAction( this.props.index )}>\r\n              Mark as Completed\r\n          </button>\r\n        </>\r\n      ) : null;\r\n    return(\r\n      <div className={styles.SingleTask}>\r\n        <span className={ styles.detail_task } >\r\n          { this.props.task }\r\n        </span>\r\n        <hr />\r\n        <span className={ styles.date_task } >\r\n          { this.props.date } - <strong>{ this.props.status }</strong>\r\n        </span>\r\n        &nbsp;\r\n        <button \r\n              className = { styles.delete_task_button }\r\n              onClick={() => this.props.deleteAction( this.props.index )}>\r\n            Delete\r\n        </button>\r\n        { markAsCompletedButton }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleTask;\r\n","import React, { Component } from 'react';\r\nimport styles from './AllTasks.module.css';\r\n\r\nimport SingleTask from '../SingleTask/SingleTask';\r\n\r\nclass AllTasks extends Component {\r\n  constructor( props ){\r\n    super( props );\r\n    this.states = {\r\n    }\r\n  }\r\n\r\n  render(){\r\n    let nTasks = null;\r\n\r\n    if( Array.isArray( this.props.tasks ) && this.props.tasks.length > 0  )\r\n    { \r\n      nTasks = (\r\n        <div>\r\n          {\r\n            this.props.tasks\r\n                    // .reverse()\r\n                    .map( (task, index)  => {\r\n\r\n              return (\r\n                    <SingleTask \r\n                        index={ index }\r\n                        task={ task.task } \r\n                        key={ index } \r\n                        date={ task.date }\r\n                        status={ task.status }\r\n                        deleteAction = { this.props.deleteAction }\r\n                        completedAction = { this.props.completedAction }\r\n                        >\r\n                        </SingleTask>\r\n                    )              \r\n            })\r\n          }\r\n\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (      \r\n      <div className={styles.AllTasks} >\r\n        { nTasks }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllTasks;\r\n","import React, { Component } from 'react';\r\nimport styles from './TaskAppComponent.module.css';\r\n\r\nimport AllTasks from '../AllTasks/AllTasks';\r\n\r\nclass TaskAppComponent extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      btnTextAdd : \"Add New Task\",\r\n      btnTextReset : \"Reset all tasks\" , \r\n      placeholder: \"Enter a new task\", \r\n      allTasks: [],\r\n      inputVal: \"\",\r\n      stateChanged : 0\r\n    }\r\n  }\r\n\r\n  saveInputText = ( event ) => {\r\n    this.setState({inputVal: event.target.value});\r\n  }\r\n  addNewTask = () =>{\r\n    if( this.state.inputVal == \"\" )\r\n    {\r\n      console.log( 'Task cannot be empty!' )\r\n      return;\r\n    }\r\n    let mVal = {\r\n      task: this.state.inputVal,\r\n      date: Date(),\r\n      status: \"Not Completed\"\r\n    }\r\n    this.setState({ \r\n          allTasks: [...this.state.allTasks, mVal],\r\n          inputVal : \"\"\r\n          }) // adding value to the state\r\n    document.getElementById( \"input_add_task\" ).value = \"\"          \r\n    alert( 'Task Added' )\r\n  }\r\n  resetTasks = () => {\r\n    let mConfirm = window.confirm( 'Are you sure?/nYou want to delete this task?' );\r\n    if( mConfirm )\r\n      {\r\n        this.setState({ allTasks: [] }) // reset value to the state tasks\r\n      }\r\n      this.forceUpdate();\r\n\r\n    alert( 'Tasks reset success!' )\r\n  }\r\n\r\n  deleteTask = ( $index ) => {\r\n    let mConfirm = window.confirm( 'Are you sure?/nYou want to delete the task '+$index+'?' );\r\n    if( mConfirm )\r\n      {\r\n        var array = [...this.state.allTasks];\r\n        if ($index !== -1) {\r\n          array.splice($index, 1);\r\n          this.setState({allTasks: array});\r\n        }\r\n        // console.log( array )\r\n      }\r\n      alert( 'Task deleted successfully' )\r\n      console.log( this.state.stateChanged )\r\n  }\r\n  markTaskDone = ( $index ) =>\r\n  { \r\n    var tempArray = this.state.allTasks,\r\n      element = tempArray[ $index ]\r\n      element.status = \"Completed\"\r\n    this.setState( { allTasks: tempArray  } )\r\n    alert( \"Task marked Completed\" )\r\n  }\r\n  render(){\r\n    return(\r\n        <div className={styles.TaskAppComponent}>\r\n          <div className=\"add-new-task\">\r\n            <input \r\n              className={ styles.input_task }\r\n              onChange={ this.saveInputText }\r\n              placeholder={this.state.placeholder }\r\n              id=\"input_add_task\"\r\n            />\r\n            <div className={styles.buttonGroups} >\r\n              <button \r\n                type=\"button\" \r\n                onClick={ this.addNewTask }\r\n                className={ styles.add_task }\r\n                >\r\n                { this.state.btnTextAdd }\r\n              </button>\r\n\r\n              <button \r\n                type=\"button\" \r\n                onClick={ this.resetTasks }\r\n                className={ styles.reset_tasks }\r\n                >\r\n                { this.state.btnTextReset }\r\n              </button>\r\n            </div>\r\n          <AllTasks \r\n            tasks={this.state.allTasks}\r\n            deleteAction = { this.deleteTask }\r\n            completedAction = { this.markTaskDone }\r\n            ></AllTasks>\r\n\r\n          </div>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskAppComponent;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport TaskAppComponent from './components/TaskAppComponent/TaskAppComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <div \r\n          className=\"heading\"\r\n          >\r\n            <h1>\r\n              TODO List - React App\r\n            </h1>\r\n          </div>\r\n        <hr />\r\n        <div className=\"todo-list\">\r\n          <TaskAppComponent/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}